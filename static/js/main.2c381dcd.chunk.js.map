{"version":3,"sources":["types/Error.ts","components/PostsList.tsx","utils/fetchClient.ts","api/comment.ts","components/Loader/Loader.tsx","utils/initialCommentState.ts","utils/initialErrorState.ts","utils/validEmail.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostApp/PostApp.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["Error","PostsList","React","memo","posts","selectedPost","setSelectedPost","setIsCommentFormActive","useEffect","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","undefined","postComment","name","email","Loader","initialCommentState","authorName","authorEmail","authorComment","initialErrorState","authorNameError","authorEmailError","authorCommentError","isValidEmail","test","NewCommentForm","setComments","setError","useState","comment","setComment","isCommentAdding","setIsCommentAdding","commentError","setCommentError","handleInputChange","key","value","prevComment","prevError","emailValidationError","handleSubmitForm","e","a","preventDefault","newComment","currentComments","Date","Load","onSubmit","htmlFor","placeholder","cn","onChange","target","PostDetails","isCommentFormActive","comments","isLoading","error","None","catch","removeComment","filter","deleteComment","length","href","UserSelector","users","selectedUser","setSelectedUser","isDropdownActive","setIsDropdownActive","dropdownRef","useRef","handleClickOutside","event","current","contains","handleKeyDown","document","addEventListener","removeEventListener","ref","role","user","handleUserChange","PostApp","setPosts","setUsers","setIsLoading","userId","finally","classNames","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2c381dcd.chunk.js","sourcesContent":["export enum Error {\n  Load = 'Something went wrong',\n  None = '',\n}\n","import React, { useEffect } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post [],\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setIsCommentFormActive: React.Dispatch<React.SetStateAction<boolean>>,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsCommentFormActive,\n}) => {\n  useEffect(() => {\n    setIsCommentFormActive(false);\n  }, [selectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              {selectedPost && selectedPost?.id === post.id\n                ? (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => setSelectedPost(null)}\n                    >\n                      Close\n                    </button>\n                  </td>\n                )\n                : (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => setSelectedPost(post)}\n                    >\n                      Open\n                    </button>\n                  </td>\n                )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId?: number) => {\n  const url = postId !== undefined ? `/comments?postId=${postId}` : '/comments';\n\n  return client.get<Comment[]>(url);\n};\n\nexport const postComment = (\n  {\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const initialCommentState = {\n  authorName: '',\n  authorEmail: '',\n  authorComment: '',\n};\n","export const initialErrorState = {\n  authorNameError: false,\n  authorEmailError: false,\n  authorCommentError: false,\n};\n","export const isValidEmail = (email: string) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  return emailRegex.test(email);\n};\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport { Error } from '../types/Error';\nimport { Comment } from '../types/Comment';\nimport { postComment } from '../api/comment';\nimport { Post } from '../types/Post';\nimport { initialCommentState } from '../utils/initialCommentState';\nimport { initialErrorState } from '../utils/initialErrorState';\nimport { isValidEmail } from '../utils/validEmail';\n\ntype Props = {\n  selectedPost: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  selectedPost,\n  setComments,\n  setError,\n}) => {\n  const [comment, setComment] = useState(initialCommentState);\n  const [isCommentAdding, setIsCommentAdding] = useState(false);\n  const [commentError, setCommentError] = useState(initialErrorState);\n\n  const handleInputChange = (key: string, value: string) => {\n    setComment(prevComment => ({\n      ...prevComment,\n      [key]: value,\n    }));\n\n    if (key === 'authorEmail') {\n      setCommentError((prevError) => ({\n        ...prevError,\n        authorEmailError: !isValidEmail(value),\n      }));\n    } else {\n      setCommentError((prevError) => ({\n        ...prevError,\n        [`${key}Error`]: value === '',\n      }));\n    }\n  };\n\n  const emailValidationError = commentError.authorEmailError || (\n    comment.authorEmail && !isValidEmail(comment.authorEmail)\n  );\n\n  const handleSubmitForm = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!comment) {\n      setCommentError({\n        ...commentError,\n        authorNameError: true,\n        authorEmailError: true,\n        authorCommentError: true,\n      });\n    }\n\n    if (!comment.authorName || !comment.authorEmail || !comment.authorComment) {\n      setCommentError({\n        ...commentError,\n        authorNameError: !comment.authorName,\n        authorEmailError: !comment.authorEmail,\n        authorCommentError: !comment.authorComment,\n      });\n\n      return;\n    }\n\n    let newComment: Omit<Comment, 'id'>;\n\n    try {\n      if (selectedPost) {\n        newComment = {\n          postId: selectedPost.id,\n          name: comment.authorName,\n          email: comment.authorEmail,\n          body: comment.authorComment,\n        };\n\n        setIsCommentAdding(true);\n        await postComment(newComment);\n        setComments(currentComments => [...currentComments,\n          { ...newComment, id: +new Date() }]);\n\n        setComment({\n          ...comment,\n          authorComment: '',\n        });\n        setIsCommentAdding(false);\n      }\n    } catch {\n      setError(Error.Load);\n    }\n  };\n\n  const resetForm = () => {\n    setComment(initialCommentState);\n    setCommentError(initialErrorState);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': commentError.authorNameError,\n            })}\n            value={comment.authorName}\n            onChange={(e) => handleInputChange('authorName', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {commentError.authorNameError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {commentError.authorNameError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            value={comment.authorEmail}\n            className={cn('input', {\n              'is-danger': emailValidationError,\n            })}\n            onChange={(e) => handleInputChange('authorEmail', e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailValidationError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {emailValidationError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              {comment.authorEmail && !isValidEmail(comment.authorEmail)\n                ? 'Please enter valid email'\n                : 'Email is required'}\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': commentError.authorCommentError,\n            })}\n            value={comment.authorComment}\n            onChange={(e) => handleInputChange('authorComment', e.target.value)}\n          />\n        </div>\n\n        {commentError.authorCommentError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isCommentAdding,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => resetForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { deleteComment, getComments } from '../api/comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post | null,\n  isCommentFormActive: boolean,\n  setIsCommentFormActive: React.Dispatch<React.SetStateAction<boolean>>,\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoading: boolean,\n  error: Error,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPost,\n  isCommentFormActive,\n  setIsCommentFormActive,\n  comments,\n  setComments,\n  isLoading,\n  error,\n  setError,\n}) => {\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedPost) {\n      getComments(selectedPost?.id)\n        .then(setComments)\n        .catch(() => setError(Error.Load));\n    }\n  }, [selectedPost?.id]);\n\n  const removeComment = (id: number) => {\n    setComments(currentComments => currentComments.filter(\n      comment => comment.id !== id,\n    ));\n\n    deleteComment(id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error\n            && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Something went wrong\n              </div>\n            )}\n\n          {!error && comments.length === 0\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {comments.length > 0 && <p className=\"title is-4\">Comments:</p>}\n          {comments.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!error && !isCommentFormActive\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsCommentFormActive(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isCommentFormActive\n          && (\n            <NewCommentForm\n              setError={setError}\n              selectedPost={selectedPost}\n              setComments={setComments}\n            />\n          )}\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const handleUserChange = (user: User) => {\n    setSelectedUser(user);\n    setIsDropdownActive(false);\n    setSelectedPost(null);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)\n    ) {\n      setIsDropdownActive(false);\n    }\n  };\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      setIsDropdownActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(true)}\n        >\n          {selectedUser\n            ? selectedUser.name\n            : <span>Choose a user</span> }\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => handleUserChange(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport '../../App.scss';\n\nimport classNames from 'classnames';\nimport { Error } from '../../types/Error';\nimport { PostsList } from '../PostsList';\nimport { PostDetails } from '../PostDetails';\nimport { UserSelector } from '../UserSelector';\nimport { Loader } from '../Loader';\nimport { getUsers } from '../../api/users';\nimport { getPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\nimport { Comment } from '../../types/Comment';\nimport { getComments } from '../../api/comment';\n\nexport const PostApp: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost]\n    = useState<Post | null>(null);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [error, setError] = useState(Error.None);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentFormActive, setIsCommentFormActive] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setError(Error.None);\n    getUsers()\n      .then(setUsers)\n      .catch(() => setError(Error.Load));\n  }, []);\n\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser?.id)\n        .then(setPosts)\n        .catch(() => setError(Error.Load))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedPost) {\n      getComments(selectedPost?.id)\n        .then(setComments)\n        .catch(() => setError(Error.Load));\n    }\n  }, [selectedPost?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isLoading && !selectedUser\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {isLoading && <Loader />}\n\n                {!isLoading && error\n                  && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                {selectedUser && !isLoading && (\n                  <>\n                    {posts.length === 0 ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) : (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                        setIsCommentFormActive={setIsCommentFormActive}\n                        setIsLoading={setIsLoading}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost\n                && (\n                  <PostDetails\n                    error={error}\n                    setError={setError}\n                    comments={comments}\n                    setComments={setComments}\n                    selectedPost={selectedPost}\n                    isCommentFormActive={isCommentFormActive}\n                    setIsCommentFormActive={setIsCommentFormActive}\n                    isLoading={isLoading}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId?: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { PostApp } from './components/PostApp/PostApp';\n\nexport const App: React.FC = () => (\n  <PostApp />\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}