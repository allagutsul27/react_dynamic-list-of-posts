{"version":3,"sources":["types/Error.ts","components/PostsList.tsx","utils/fetchClient.ts","api/comment.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostApp/PostApp.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["Error","PostsList","React","memo","posts","selectedPost","setSelectedPost","setIsCommentFormActive","useEffect","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","postId","undefined","postComment","name","email","Loader","NewCommentForm","setComments","isLoading","setError","useState","authorName","setAuthorName","isNameError","setIsNameError","authorEmail","setAuthorEmail","isEmailError","setIsEmailError","commentText","setCommentText","isCommentError","setIsCommentError","handleSubmitForm","e","a","preventDefault","newComment","currentComments","Date","Load","onSubmit","htmlFor","placeholder","cn","value","onChange","target","handleAuthorName","handleAuthorEmail","handleCommentText","PostDetails","isCommentFormActive","comments","error","None","catch","removeComment","filter","comment","deleteComment","length","href","UserSelector","users","selectedUser","setSelectedUser","isDropdownActive","setIsDropdownActive","dropdownRef","useRef","handleClickOutside","event","current","contains","handleKeyDown","key","document","addEventListener","removeEventListener","ref","role","user","handleUserChange","PostApp","setPosts","setUsers","setIsLoading","userId","finally","classNames","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f217492c.chunk.js","sourcesContent":["export enum Error {\n  Load = 'Something went wrong',\n  None = '',\n  NoName = 'Name is required',\n  NoEmail = 'Email is required',\n  NoComment = 'Enter some text',\n}\n","import React, { useEffect } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post [],\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setIsCommentFormActive: React.Dispatch<React.SetStateAction<boolean>>,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsCommentFormActive,\n}) => {\n  useEffect(() => {\n    setIsCommentFormActive(false);\n  }, [selectedPost]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              {selectedPost && selectedPost?.id === post.id\n                ? (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => setSelectedPost(null)}\n                    >\n                      Close\n                    </button>\n                  </td>\n                )\n                : (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => setSelectedPost(post)}\n                    >\n                      Open\n                    </button>\n                  </td>\n                )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId?: number) => {\n  const url = postId !== undefined ? `/comments?postId=${postId}` : '/comments';\n\n  return client.get<Comment[]>(url);\n};\n\nexport const postComment = (\n  {\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React, { useState } from 'react';\nimport { Error } from '../types/Error';\nimport { Comment } from '../types/Comment';\nimport { postComment } from '../api/comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoading: boolean,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  selectedPost,\n  setComments,\n  isLoading,\n  setError,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const handleAuthorName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setAuthorName(e.target.value);\n  };\n\n  const handleAuthorEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setAuthorEmail(e.target.value);\n  };\n\n  const handleCommentText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsCommentError(false);\n    setCommentText(e.target.value);\n  };\n\n  const handleSubmitForm = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!authorName) {\n      setIsNameError(true);\n    }\n\n    if (!authorEmail) {\n      setIsEmailError(true);\n    }\n\n    if (!commentText) {\n      setIsCommentError(true);\n    }\n\n    if (!authorName || !authorEmail || !commentText) {\n      return;\n    }\n\n    let newComment: Omit<Comment, 'id'>;\n\n    try {\n      if (selectedPost) {\n        newComment = {\n          postId: selectedPost.id,\n          name: authorName,\n          email: authorEmail,\n          body: commentText,\n        };\n\n        await postComment(newComment);\n        setComments(currentComments => [...currentComments,\n          { ...newComment, id: +new Date() }]);\n      }\n    } catch {\n      setError(Error.Load);\n    } finally {\n      setCommentText('');\n    }\n  };\n\n  const resetForm = () => {\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={authorName}\n            onChange={(e) => handleAuthorName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {isNameError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={authorEmail}\n            onChange={(e) => handleAuthorEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {isEmailError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Email is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isCommentError,\n            })}\n            value={commentText}\n            onChange={(e) => handleCommentText(e)}\n          />\n        </div>\n\n        {isCommentError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => resetForm()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","import React, { useEffect } from 'react';\nimport { deleteComment, getComments } from '../api/comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\n// import { getComments } from '../api/comment';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post | null,\n  isCommentFormActive: boolean,\n  setIsCommentFormActive: React.Dispatch<React.SetStateAction<boolean>>,\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoading: boolean,\n  error: Error,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPost,\n  isCommentFormActive,\n  setIsCommentFormActive,\n  comments,\n  setComments,\n  isLoading,\n  error,\n  setError,\n}) => {\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedPost) {\n      getComments(selectedPost?.id)\n        .then(setComments)\n        .catch(() => setError(Error.Load));\n    }\n  }, [selectedPost?.id]);\n\n  const removeComment = (id: number) => {\n    setComments(currentComments => currentComments.filter(\n      comment => comment.id !== id,\n    ));\n\n    deleteComment(id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error\n            && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Something went wrong\n              </div>\n            )}\n\n          {!error && comments.length === 0\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {comments.length > 0 && <p className=\"title is-4\">Comments:</p>}\n          {comments.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!error && !isCommentFormActive\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsCommentFormActive(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isCommentFormActive\n          && (\n            <NewCommentForm\n              setError={setError}\n              selectedPost={selectedPost}\n              setComments={setComments}\n              isLoading={isLoading}\n            />\n          )}\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const handleUserChange = (user: User) => {\n    setSelectedUser(user);\n    setIsDropdownActive(false);\n    setSelectedPost(null);\n  };\n\n  const handleClickOutside = (event: MouseEvent) => {\n    if (dropdownRef.current\n      && !dropdownRef.current.contains(event.target as Node)\n    ) {\n      setIsDropdownActive(false);\n    }\n  };\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      setIsDropdownActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <div\n      ref={dropdownRef}\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(true)}\n        >\n          {selectedUser\n            ? selectedUser.name\n            : <span>Choose a user</span> }\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => handleUserChange(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport '../../App.scss';\n\nimport classNames from 'classnames';\nimport { Error } from '../../types/Error';\nimport { PostsList } from '../PostsList';\nimport { PostDetails } from '../PostDetails';\nimport { UserSelector } from '../UserSelector';\nimport { Loader } from '../Loader';\nimport { getUsers } from '../../api/users';\nimport { getPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\nimport { Comment } from '../../types/Comment';\nimport { getComments } from '../../api/comment';\n\nexport const PostApp: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost]\n    = useState<Post | null>(null);\n\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const [error, setError] = useState(Error.None);\n\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentFormActive, setIsCommentFormActive] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setError(Error.None);\n    getUsers()\n      .then(setUsers)\n      .catch(() => setError(Error.Load));\n  }, []);\n\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser?.id)\n        .then(setPosts)\n        .catch(() => setError(Error.Load))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setError(Error.None);\n    if (selectedPost) {\n      getComments(selectedPost?.id)\n        .then(setComments)\n        .catch(() => setError(Error.Load));\n    }\n  }, [selectedPost?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isLoading && !selectedUser\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {isLoading && <Loader />}\n\n                {!isLoading && error\n                  && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                {selectedUser && !isLoading && (\n                  <>\n                    {posts.length === 0 ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) : (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                        setIsCommentFormActive={setIsCommentFormActive}\n                        setIsLoading={setIsLoading}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost\n                && (\n                  <PostDetails\n                    error={error}\n                    setError={setError}\n                    comments={comments}\n                    setComments={setComments}\n                    selectedPost={selectedPost}\n                    isCommentFormActive={isCommentFormActive}\n                    setIsCommentFormActive={setIsCommentFormActive}\n                    isLoading={isLoading}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId?: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { PostApp } from './components/PostApp/PostApp';\n\nexport const App: React.FC = () => (\n  <PostApp />\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}