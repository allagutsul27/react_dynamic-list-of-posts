{"version":3,"sources":["types/Error.ts","components/context/PostContext.tsx","components/PostsList.tsx","utils/fetchClient.ts","api/comment.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","components/PostApp/PostApp.tsx","api/users.ts","api/posts.ts","App.tsx","index.tsx"],"names":["Error","PostContext","React","createContext","comments","setComments","error","None","setError","isLoading","setIsLoading","PostProvider","children","useState","value","Provider","PostsList","memo","posts","selectedPost","setSelectedPost","isFirstClick","setIsFirstClick","className","map","post","id","title","type","onClick","handleSelectPost","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","postComment","postId","name","email","Loader","NewCommentForm","useContext","authorName","setAuthorName","isNameError","setIsNameError","authorEmail","setAuthorEmail","isEmailError","setIsEmailError","commentText","setCommentText","isCommentError","setIsCommentError","handleSubmitForm","e","a","preventDefault","newComment","currentComments","Date","Load","onSubmit","htmlFor","placeholder","cn","onChange","target","handleAuthorName","handleAuthorEmail","handleCommentText","PostDetails","isCommentFormActive","setIsCommentFormActive","removeComment","filter","comment","deleteComment","length","href","UserSelector","users","selectedUser","setSelectedUser","isDropdownActive","setIsDropdownActive","role","user","handleUserChange","PostApp","setPosts","setUsers","useEffect","catch","finally","userId","classNames","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e1da88a.chunk.js","sourcesContent":["export enum Error {\n  Load = 'Something went wrong',\n  None = '',\n  NoName = 'Name is required',\n  NoEmail = 'Email is required',\n  NoComment = 'Enter some text',\n}\n","import React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Error } from '../../types/Error';\n\ntype PostContextType = {\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  error: Error,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n  isLoading: boolean,\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostContext = React.createContext<PostContextType>({\n  comments: [],\n  setComments: () => { },\n  error: Error.None,\n  setError: () => { },\n  isLoading: false,\n  setIsLoading: () => { },\n});\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const PostProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [error, setError] = useState(Error.None);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const value = {\n    comments,\n    setComments,\n    error,\n    setError,\n    isLoading,\n    setIsLoading,\n  };\n\n  return (\n    <PostContext.Provider value={value}>\n      {children}\n    </PostContext.Provider>\n  );\n};\n","import React, { useState } from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post [],\n  selectedPost: Post | null,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const [isFirstClick, setIsFirstClick] = useState(false);\n\n  const handleSelectPost = (post: Post) => {\n    setSelectedPost(post);\n    setIsFirstClick(true);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              {isFirstClick && selectedPost?.id === post.id\n                ? (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => setSelectedPost(null)}\n                    >\n                      Close\n                    </button>\n                  </td>\n                )\n                : (\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => handleSelectPost(post)}\n                    >\n                      Open\n                    </button>\n                  </td>\n                )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId?: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComment = (\n  {\n    postId, name, email, body,\n  }: Omit<Comment, 'id'>,\n) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { PostContext } from './context/PostContext';\nimport { Error } from '../types/Error';\nimport { Comment } from '../types/Comment';\nimport { postComment } from '../api/comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedPost: Post | null,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPost }) => {\n  const {\n    setError,\n    setComments,\n    isLoading,\n    setIsLoading,\n  } = useContext(PostContext);\n\n  const [authorName, setAuthorName] = useState('');\n  const [isNameError, setIsNameError] = useState(false);\n\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [isEmailError, setIsEmailError] = useState(false);\n\n  const [commentText, setCommentText] = useState('');\n  const [isCommentError, setIsCommentError] = useState(false);\n\n  const handleAuthorName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsNameError(false);\n    setAuthorName(e.target.value);\n  };\n\n  const handleAuthorEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setIsEmailError(false);\n    setAuthorEmail(e.target.value);\n  };\n\n  const handleCommentText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setIsCommentError(false);\n    setCommentText(e.target.value);\n  };\n\n  const handleSubmitForm = async (e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    if (!authorName) {\n      setIsNameError(true);\n    }\n\n    if (!authorEmail) {\n      setIsEmailError(true);\n    }\n\n    if (!commentText) {\n      setIsCommentError(true);\n    }\n\n    if (!authorName || !authorEmail || !commentText) {\n      return;\n    }\n\n    let newComment: Omit<Comment, 'id'>;\n\n    try {\n      if (selectedPost) {\n        newComment = {\n          postId: selectedPost?.id,\n          name: authorName,\n          email: authorEmail,\n          body: commentText,\n        };\n\n        setIsLoading(true);\n        await postComment(newComment);\n        setComments(currentComments => [...currentComments,\n          { ...newComment, id: +new Date() }]);\n      }\n    } catch {\n      setError(Error.Load);\n    } finally {\n      setIsLoading(false);\n    }\n\n    setCommentText('');\n  };\n\n  const reset = () => {\n    setIsNameError(false);\n    setIsEmailError(false);\n    setIsCommentError(false);\n\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmitForm}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', {\n              'is-danger': isNameError,\n            })}\n            value={authorName}\n            onChange={(e) => handleAuthorName(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isNameError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {isNameError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Name is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', {\n              'is-danger': isEmailError,\n            })}\n            value={authorEmail}\n            onChange={(e) => handleAuthorEmail(e)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isEmailError\n            && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n        </div>\n\n        {isEmailError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Email is required\n            </p>\n          )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea', {\n              'is-danger': isCommentError,\n            })}\n            value={commentText}\n            onChange={(e) => handleCommentText(e)}\n          />\n        </div>\n\n        {isCommentError\n          && (\n            <p\n              className=\"help is-danger\"\n              data-cy=\"ErrorMessage\"\n            >\n              Enter some text\n            </p>\n          )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', {\n              'is-loading': isLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => reset()}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useState } from 'react';\nimport { deleteComment } from '../api/comment';\nimport { Post } from '../types/Post';\nimport { PostContext } from './context/PostContext';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  selectedPost: Post | null,\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPost }) => {\n  const {\n    error,\n    comments,\n    setComments,\n    isLoading,\n  } = useContext(PostContext);\n\n  const [isCommentFormActive, setIsCommentFormActive] = useState(false);\n\n  const removeComment = (id: number) => {\n    setComments(currentComments => currentComments.filter(\n      comment => comment.id !== id,\n    ));\n\n    deleteComment(id);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error\n            && (\n              <div\n                className=\"notification is-danger\"\n                data-cy=\"CommentsError\"\n              >\n                Something went wrong\n              </div>\n            )}\n\n          {!error && comments.length === 0\n            && (\n              <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                No comments yet\n              </p>\n            )}\n\n          {comments.length > 0 && <p className=\"title is-4\">Comments:</p>}\n          {comments.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => removeComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {!error && !isCommentFormActive\n            && (\n              <button\n                data-cy=\"WriteCommentButton\"\n                type=\"button\"\n                className=\"button is-link\"\n                onClick={() => setIsCommentFormActive(true)}\n              >\n                Write a comment\n              </button>\n            )}\n        </div>\n\n        {isCommentFormActive && <NewCommentForm selectedPost={selectedPost} />}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n  setSelectedPost: React.Dispatch<React.SetStateAction<Post | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  const handleUserChange = (user: User) => {\n    setSelectedUser(user);\n    setIsDropdownActive(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(true)}\n        >\n          {selectedUser\n            ? selectedUser.name\n            : <span>Choose a user</span> }\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item', {\n                'is-active': selectedUser?.id === user.id,\n              })}\n              onClick={() => handleUserChange(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport '../../App.scss';\n\nimport classNames from 'classnames';\nimport { Error } from '../../types/Error';\nimport { PostsList } from '../PostsList';\nimport { PostDetails } from '../PostDetails';\nimport { UserSelector } from '../UserSelector';\nimport { Loader } from '../Loader';\nimport { getUsers } from '../../api/users';\nimport { getPosts } from '../../api/posts';\nimport { PostContext } from '../context/PostContext';\nimport { getComments } from '../../api/comment';\nimport { Post } from '../../types/Post';\nimport { User } from '../../types/User';\n\nexport const PostApp: React.FC = () => {\n  const {\n    setComments,\n  } = React.useContext(PostContext);\n\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost]\n    = useState<Post | null>(null);\n  const [error, setError] = useState(Error.None);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setError(Error.None);\n    setIsLoading(true);\n    getUsers()\n      .then(setUsers)\n      .catch(() => setError(Error.Load))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setError(Error.None);\n    setIsLoading(true);\n    if (selectedUser) {\n      getPosts(selectedUser?.id)\n        .then(setPosts)\n        .catch(() => setError(Error.Load))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    setError(Error.None);\n    setIsLoading(true);\n    if (selectedPost) {\n      getComments(selectedPost?.id)\n        .then(setComments)\n        .catch(() => setError(Error.Load))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedPost?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser\n                  && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                {isLoading && <Loader />}\n\n                {error\n                  && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                {selectedUser && !isLoading && (\n                  <>\n                    {posts.length === 0 ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) : (\n                      <PostsList\n                        posts={posts}\n                        selectedPost={selectedPost}\n                        setSelectedPost={setSelectedPost}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails selectedPost={selectedPost} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId?: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { PostProvider } from './components/context/PostContext';\nimport { PostApp } from './components/PostApp/PostApp';\n\nexport const App: React.FC = () => (\n  <PostProvider>\n    <PostApp />\n  </PostProvider>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}